#!/bin/bash
# =============================================================================
# @file    upload-micropublication-to-pmc
# @brief   Script meant to be run from cron
# @author  Michael Hucka <mhucka@caltech.edu>
# @license Please see the file named LICENSE in the project directory
# @website https://github.com/caltechlibrary/microarchiver
#
# Principles:
#
#  1. The frequency of uploads is set by the cron schedule, not in here.
#
#  2. The FTP credentials for the PMC server are passed via environment
#     variables PMC_FTP_USER and PMC_FTP_PASS.
#
#  3. A timestamp file is created in the output directory, and microarchiver
#     is run with that date stamp as the "after date" argument.
#
#  4. Archives are created in subdirectories of the output directory named
#     after the date+time they were done.  E.g., "2019-08-29-1000".
#
#  5. A report file is written to the output directory and named "report.csv".
#
#  6. A log file is written to the output directory and named "run.log".
#
# =============================================================================

# Destination where all files and subdirectories are stored:
outputroot=/raid/micropublication/pmc

# Comma-separated list of addresses that receive emailed reports
logmaildest=""
errormaildest=""

# Channel where to post Slack message.
slackdest=""

# -----------------------------------------------------------------------------
# The rest of this file should not need further configuration
# -----------------------------------------------------------------------------

today=$(date +%Y-%m-%d)
datestampfile=$outputroot/last-run-date

# Create the output directory where we'll write this run's archive.
# However, name the output directory with the current time rather than
# merely today's date, because if we run multiple times per day, we
# would otherwise overwrite the previous data.

now=$(date +%Y-%m-%d-%H%M)
outputdir=$outputroot/$now
mkdir -p $outputdir

# Read the date stamp from the previous run.

if [[ -e $datestampfile ]]; then
    read lastrun < $datestampfile
else
    # We've never run, or someone reset the date stamp.
    # Use a fake date that basically signifies "since forever".
    lastrun="1900-01-01"
fi

# Run microarchiver -----------------------------------------------------------

log=$outputdir/run.log
report=$outputdir/report.csv
trace=$outputdir/debug.log

echo "Starting at $now" >> $log
echo "" >> $log

echo "=== Running microarchiver for articles since $lastrun ===" >> $log
# This will get all articles since the last successful run.  If there were
# any failures, they will be tried again as a result of this, because we
# don't upload and don't update the last-run date if there are any failures.
microarchiver -s pmc -C -d $lastrun -o $outputdir -r $report -@ $trace >> $log 2>&1

# Did we have validation failures?  Notify someone specifically about that.
lines=$(grep validation $report | wc -l)
if [[ $lines -gt 0 ]]; then
    mail -s"PMC upload stopped $today due to errors in $lines articles" \
         -a $report -a $log $errormaildest

    slack chat send --channel $slackdest --color "#ff0000" \
          --title "Microarchiver stopped PMC upload due to errors in $lines articles"
    slack file upload --channels $slackdest --file "$log" \
          --comment "Here is the microarchiver run log"
else
    # If we didn't have validation errors, ftp any new archives to PMC.
    # Note: curl has weird syntax for sending multiple files at once.
    lines=$(grep complete $report | wc -l)
    if [[ $lines -gt 0 ]]; then
        echo "" >> $log
        echo "=== FTP'ing file using curl ===" >> $log
        curl --user $PMC_FTP_USER:$PMC_FTP_PASS \
            -T "{$(echo $outputdir/micropublication-org/*.zip | tr ' ' ',')}" \
            ftp://ftp-private.ncbi.nlm.nih.gov/ >> $log 2>&1
    fi

    # If we get this far, write out a date stamp file to indicate that things
    # ran successfully and to give the next run a starting point.
    echo $today > $datestampfile

    # Send email about the results.
    grep -F "Total articles" $log | \
        sed 's/Total //g;1 s/articles/Past failures retried/;2 s/articles/New &/' | \
        mail -s"PMC upload results for $today" -a $report -a $log $logmaildest

    # Post the report to Slack.
    slack file upload --channels $slackdest --file $log \
      --comment "microarchiver successfully completed PMC upload"
fi
